public class Solution {
    public int minPathSum(int[][] A) {

        int[][]  cost = new int[A.length+1][A[0].length+1];
        int row = A.length-1;
        int col = A[0].length-1;
        
        cost[0][0] = A[0][0];
        
        for(int i=1; i <= row; i++) {
            cost[i][0] =  cost[i-1][0] + A[i][0];
        }
        
        for(int i=1; i <= col; i++) {
            cost[0][i] =  cost[0][i-1] + A[0][i];
        }
        
        for(int i=1; i<=row; i++) {
            for(int j=1; j<=col; j++) {
                cost[i][j] = A[i][j] + Math.min(cost[i-1][j], cost[i][j-1]);
            }
        }
        
        return cost[row][col];
        // if (row < 0 || col < 0)
        //   return Integer.MAX_VALUE;
          
        // if(row == 0 && col == 0) {
        //     return A.get(row).get(col);
        // }
        
        // return A.get(row).get(col) + Math.min(minPathSumList(A,row-1,col),minPathSumList(A,row,col-1));
    }
}
